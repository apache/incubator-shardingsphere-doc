<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test Engine on ShardingSphere</title>
    <link>https://shardingsphere.apache.org/document/current/en/features/test-engine/</link>
    <description>Recent content in Test Engine on ShardingSphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://shardingsphere.apache.org/document/current/en/features/test-engine/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SQL Case</title>
      <link>https://shardingsphere.apache.org/document/current/en/features/test-engine/sql-case/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/features/test-engine/sql-case/</guid>
      <description>Configuration After setup environment and initial data, developer need to define SQL test cases. the SQL to be asserted in file /sharding-sql-test/src/main/resources/sql/sharding/SQL-TYPE/*.xml. For example:
&amp;lt;sql-cases&amp;gt; &amp;lt;sql-case id=&amp;quot;update_without_parameters&amp;quot; value=&amp;quot;UPDATE t_order SET status = &#39;update&#39; WHERE order_id = 1000 AND user_id = 10&amp;quot; /&amp;gt; &amp;lt;sql-case id=&amp;quot;update_with_alias&amp;quot; value=&amp;quot;UPDATE t_order AS o SET o.status = ? WHERE o.order_id = ? AND o.user_id = ?&amp;quot; db-types=&amp;quot;MySQL,H2&amp;quot; /&amp;gt; &amp;lt;/sql-cases&amp;gt;  Developer setup the SQL for assertion and database type during on the configuration file.</description>
    </item>
    
    <item>
      <title>Integration Test Engine</title>
      <link>https://shardingsphere.apache.org/document/current/en/features/test-engine/integration-test-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/features/test-engine/integration-test-engine/</guid>
      <description>Process The Parameterized in JUnit will collect all test data, and pass to test method to assert one by one. The process of handling test data is just like a leaking hourglass:
Configuration In order to make test engine easier to setup, integration-test is designed to modify the following configuration files to execute all assertions without any Java code modification:
 environment type  /sharding-integration-test/sharding-jdbc-test/src/test/resources/integrate/env.properties /sharding-integration-test/sharding-jdbc-test/src/test/resources/integrate/env/SQL-TYPE/dataset.xml /sharding-integration-test/sharding-jdbc-test/src/test/resources/integrate/env/SQL-TYPE/schema.xml  test case type  /sharding-integration-test/sharding-jdbc-test/src/test/resources/integrate/cases/SQL-TYPE/SQL-TYPE-integrate-test-cases.</description>
    </item>
    
    <item>
      <title>SQL Parse Test Engine</title>
      <link>https://shardingsphere.apache.org/document/current/en/features/test-engine/paese-test-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/features/test-engine/paese-test-engine/</guid>
      <description>Prepare Data Not like Integration test, SQL parse test doesn&amp;rsquo;t need a specific database environment, just define the sql to parse, and the assert data:
SQL Data As mentioned sql-case-id in Integration testï¼Œtest-case-id could be shared in different module to test, and the file is at /sharding-sql-test/src/main/resources/sql/sharding/SQL-TYPE/*.xml
Parser Assert Data The assert data is at /sharding-core/sharding-core-parse/sharding-core-parse-test/src/test/resources/sharding/SQL-TYPE/*.xml in that xml file, it could assert against the table name, token or sql condition and so on.</description>
    </item>
    
    <item>
      <title>SQL Rewrite Test Engine</title>
      <link>https://shardingsphere.apache.org/document/current/en/features/test-engine/rewrite-test-engine/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/features/test-engine/rewrite-test-engine/</guid>
      <description>Target Facing logic databases and tables cannot be executed directly in actual databases. SQL rewrite is used to rewrite logic SQL into rightly executable ones in actual databases, including two parts, correctness rewrite and optimization rewrite. rewrite tests are for these targets.
Test The rewrite tests are in the test folder under sharding-core/sharding-core-rewrite . Followings are the main part for rewrite tests:
 test engine environment configuration assert data  Test engine is the entrance of rewrite tests, just like other test engines, through Junit Parameterized, read every and each data in the xml file under the target test type in test\resources, and then assert by the engine one by one</description>
    </item>
    
    <item>
      <title>Performance Test</title>
      <link>https://shardingsphere.apache.org/document/current/en/features/test-engine/performance-test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shardingsphere.apache.org/document/current/en/features/test-engine/performance-test/</guid>
      <description>Target Performance test is classified as loss test and promotion test according to its verification target. Insert &amp;amp; update &amp;amp; delete which regarded as an association operation and select which focus on sharding optimization are used to evaluate performance based on the four different scenarios (single route, master slave, master slave &amp;amp; encrypt &amp;amp; sharding, full route). To achieve the result better, these tests are performed based on one thousand data with 20 concurrent threads for 30 minutes.</description>
    </item>
    
  </channel>
</rss>